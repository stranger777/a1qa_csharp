<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptanceCriteriaMsg" xml:space="preserve">
    <value>{0} : UIItem [AutomationId:{1}] [Name:{2}] [Type:{3}]</value>
  </data>
  <data name="AcceptanceCriteriaValueMsg" xml:space="preserve">
    <value>{0} : Value '{1}' : UIItem [AutomationId:{2}] [Name:{3}] [Type:{4}]</value>
  </data>
  <data name="ApplicationAttachMsg" xml:space="preserve">
    <value>Attaching Application to existing process [ProcessName:{0}]...</value>
  </data>
  <data name="ApplicationCloseMsg" xml:space="preserve">
    <value>Closing Application [ProcessName:{0}]...</value>
  </data>
  <data name="ApplicationCloseSuccessMsg" xml:space="preserve">
    <value>Application closed!</value>
  </data>
  <data name="ApplicationLaunchFailureMsg" xml:space="preserve">
    <value>Application failed to launch! : {0}</value>
  </data>
  <data name="ApplicationLaunchMsg" xml:space="preserve">
    <value>Launching Application : '{0}'</value>
  </data>
  <data name="ApplicationLaunchSuccessMsg" xml:space="preserve">
    <value>Application launched in {0} seconds</value>
  </data>
  <data name="DataGridDifferentValueMsg" xml:space="preserve">
    <value>Different values at 'Row: {0}, Column: {1}'. Expected '{2}', Actual '{3}'</value>
  </data>
  <data name="FriendlyCheckBoxSelectMsg" xml:space="preserve">
    <value>Selected CheckBox '{0}'</value>
  </data>
  <data name="FriendlyCheckBoxUnSelectMsg" xml:space="preserve">
    <value>UnSelected CheckBox '{0}'</value>
  </data>
  <data name="WindowNotFoundMsg" xml:space="preserve">
    <value>Window not found within {0} timeout! : {1}</value>
  </data>
  <data name="WindowMaximizeMsg" xml:space="preserve">
    <value>Maximizing Window [WindowName={0}]...</value>
  </data>
  <data name="WindowIsNullMsg" xml:space="preserve">
    <value>Window is null!</value>
  </data>
  <data name="WindowFoundMsg" xml:space="preserve">
    <value>Window found in {0} seconds</value>
  </data>
  <data name="WindowFindUsingSearchCriteriaMsg" xml:space="preserve">
    <value>Finding Window matching [SearchCriteria:{0}] in Application [ProcessName:{1}]...</value>
  </data>
  <data name="WindowExistsTrueMsg" xml:space="preserve">
    <value>Window does exist : Window [AutomationId:{0}] [Name:{1}]</value>
  </data>
  <data name="WindowExistsOffScreenMsg" xml:space="preserve">
    <value>Window does exist but is off-screen! : UIItem [AutomationId:{0}] [Name:{1}]</value>
  </data>
  <data name="WindowExistsMsg" xml:space="preserve">
    <value>Checking if Window exists...</value>
  </data>
  <data name="WindowExistsFalseMsg" xml:space="preserve">
    <value>Window does not exist! : {0}</value>
  </data>
  <data name="WindowCloseMsg" xml:space="preserve">
    <value>Closing Window [WindowName={0}]...</value>
  </data>
  <data name="UIItemNotFoundMsg" xml:space="preserve">
    <value>UIItem not found within {0} timeout! : {1}</value>
  </data>
  <data name="UIItemMultipleNotFoundMsg" xml:space="preserve">
    <value>UIItem(s) not found within {0} timeout! : {1}</value>
  </data>
  <data name="UIItemMultipleFoundMsg" xml:space="preserve">
    <value>{0} UIItem(s) found in {1} seconds</value>
  </data>
  <data name="UIItemMultipleFindUsingSearchCriteriaMsg" xml:space="preserve">
    <value>Finding *multiple* UIItems matching [SearchCriteria:{0}] [Type:{1}] in Scope [AutomationId:{2}]...</value>
  </data>
  <data name="UIItemIsNullMsg" xml:space="preserve">
    <value>UIItem is null! : [FriendlyName: {0}]</value>
  </data>
  <data name="UIItemInvalidCastMsg" xml:space="preserve">
    <value>Invalid cast on UIItem! : {0}</value>
  </data>
  <data name="UIItemFoundMsg" xml:space="preserve">
    <value>UIItem found in {0} seconds</value>
  </data>
  <data name="UIItemFindUsingSearchCriteriaMsg" xml:space="preserve">
    <value>Finding UIItem matching [SearchCriteria:{0}] [Type:{1}] in Scope [AutomationId:{2}]...</value>
  </data>
  <data name="UIItemFindUsingExtraCriteriaMsg" xml:space="preserve">
    <value>Finding UIItem matching [SearchCriteria:{0}] [Type:{1}] [ExtraCriteria:{2}={3}] in Scope [AutomationId:{4}]...</value>
  </data>
  <data name="UIItemExistsTrueMsg" xml:space="preserve">
    <value>UIItem does exist : UIItem [AutomationId:{0}] [Name:{1}] [Type:{2}]</value>
  </data>
  <data name="UIItemExistsOffScreenMsg" xml:space="preserve">
    <value>UIItem does exist but is off-screen! : UIItem [AutomationId:{0}] [Name:{1}] [Type:{2}]</value>
  </data>
  <data name="UIItemExistsMsg" xml:space="preserve">
    <value>Checking if UIItem exists...</value>
  </data>
  <data name="UIItemExistsFalseMsg" xml:space="preserve">
    <value>UIItem does not exist! : {0}</value>
  </data>
  <data name="UIItemDebugMsg" xml:space="preserve">
    <value>Debug : UIItem [AutomationId:{0}] [Name:{1}] [Type:{2}]</value>
  </data>
  <data name="UIItemCheckUsingExtraCriteriaMsg" xml:space="preserve">
    <value>Checking UIItem [AutomationId:{0}] [Name:{1}] also matches ExtraCriteria...</value>
  </data>
  <data name="UIItemActionValueMsg" xml:space="preserve">
    <value>{0} : Value '{1}' : UIItem [FriendlyName:{2}] [AutomationId:{3}] [Name:{4}] [Type:{5}]</value>
  </data>
  <data name="UIItemActionMsg" xml:space="preserve">
    <value>{0} : UIItem [FriendlyName:{1}] [AutomationId:{2}] [Name:{3}] [Type:{4}]</value>
  </data>
  <data name="TreeNodeNotFoundErrorMsg" xml:space="preserve">
    <value>Error : TreeNode with path '{0}' was not found in '{1}' Tree parent</value>
  </data>
  <data name="ModalWindowNotFoundMsg" xml:space="preserve">
    <value>Modal Window not found within {0} timeout! : {1}</value>
  </data>
  <data name="ModalWindowIsOffScreenMsg" xml:space="preserve">
    <value>Modal Window is off-screen!</value>
  </data>
  <data name="ModalWindowFoundMsg" xml:space="preserve">
    <value>Modal Window found in {0} seconds</value>
  </data>
  <data name="ModalWindowFindUsingSearchCriteriaMsg" xml:space="preserve">
    <value>Finding Modal Window matching [SearchCriteria:{0}] in Window [AutomationId:{1}]...</value>
  </data>
  <data name="ModalWindowExistsMsg" xml:space="preserve">
    <value>Checking if Modal Window exists...</value>
  </data>
  <data name="ListBoxItemNotFoundErrorMsg" xml:space="preserve">
    <value>Error : ListItem with label '{0}' was not found in '{1}' ListBox parent</value>
  </data>
  <data name="FriendlyTreeNodeSelectMsg" xml:space="preserve">
    <value>Select TreeNode '{0}'</value>
  </data>
  <data name="FriendlyTextBoxSetMsg" xml:space="preserve">
    <value>Set Field '{0}' to '{1}'</value>
  </data>
  <data name="FriendlyListItemUnCheckMsg" xml:space="preserve">
    <value>UnChecked ListItem '{0}'</value>
  </data>
  <data name="FriendlyListItemSelectMsg" xml:space="preserve">
    <value>Selected ListItem '{0}'</value>
  </data>
  <data name="FriendlyListItemCheckMsg" xml:space="preserve">
    <value>Checked ListItem '{0}'</value>
  </data>
  <data name="FriendlyDataGridRowSelectMsg" xml:space="preserve">
    <value>Selected Row '{0}'</value>
  </data>
  <data name="FriendlyDataGridCompareRowCountMsg" xml:space="preserve">
    <value>Table '{0}' matches row count of expected table</value>
  </data>
  <data name="FriendlyDataGridComparePassMsg" xml:space="preserve">
    <value>Table '{0}' passed comparison check</value>
  </data>
  <data name="FriendlyDataGridCellSetMsg" xml:space="preserve">
    <value>Set Cell '{0}' to '{1}'</value>
  </data>
  <data name="FriendlyComboBoxSelectMsg" xml:space="preserve">
    <value>Set ComboBox '{0}' to '{1}'</value>
  </data>
  <data name="FriendlyTableRowSelectMsg" xml:space="preserve">
    <value>Select table row '{0}'</value>
  </data>
  <data name="FriendlyTabSelectMsg" xml:space="preserve">
    <value>Select tab '{0}'</value>
  </data>
  <data name="FriendlyComboBoxNotEditable" xml:space="preserve">
    <value>ComboBox '{0}' is not editable</value>
  </data>
  <data name="UIItemMultipleFindUsingAutomationPropertyCriteriaMsg" xml:space="preserve">
    <value>Finding *multiple* UIItems matching in Scope [AutomationId:{0}]...</value>
  </data>
  <data name="ModalWindowFindUsingTitleMsg" xml:space="preserve">
    <value>Finding Modal Window matching [Title:{0}] in Window [AutomationId:{1}]...</value>
  </data>
  <data name="UIItemFindUsingConditionMsg" xml:space="preserve">
    <value>Finding UIItem matching [Condition:{0}] [Type:{1}] [TreeScope:{2}] in Scope [AutomationId:{3}]...</value>
  </data>
</root>